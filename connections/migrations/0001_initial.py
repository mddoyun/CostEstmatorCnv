# Generated by Django 5.2.6 on 2025-10-19 15:21

import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CostCode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=255)),
                ('spec', models.TextField(blank=True, null=True)),
                ('unit', models.CharField(blank=True, max_length=50, null=True)),
                ('category', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ai_sd_enabled', models.BooleanField(default=False, verbose_name='개산견적(SD) 사용')),
                ('dd_enabled', models.BooleanField(default=False, verbose_name='상세견적(DD) 사용')),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='새 프로젝트', max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='MemberMarkAssignmentRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='새 일람부호 할당 규칙', max_length=255)),
                ('conditions', models.JSONField(blank=True, default=list, help_text='규칙이 적용될 QuantityMember를 필터링하는 조건')),
                ('mark_expression', models.CharField(help_text="할당할 일람부호(Mark) 값을 반환하는 표현식. 예: 'C' + str({층})", max_length=255)),
                ('priority', models.IntegerField(default=0)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='member_mark_assignment_rules', to='connections.project')),
            ],
            options={
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='MemberMark',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('mark', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('properties', models.JSONField(blank=True, default=dict)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='member_marks', to='connections.project')),
            ],
            options={
                'ordering': ['mark'],
                'unique_together': {('project', 'mark')},
            },
        ),
        migrations.CreateModel(
            name='CostCodeRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='새 공사코드 룰셋', max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('conditions', models.JSONField(blank=True, default=list, help_text='규칙이 적용될 QuantityMember를 필터링하는 조건')),
                ('quantity_mapping_script', models.JSONField(default=dict, help_text="수량을 계산하는 맵핑 스크립트. 예: {'수량': '({면적} + [철근총길이]) * 1.05'}")),
                ('priority', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('target_cost_code', models.ForeignKey(help_text='이 규칙이 적용될 대상 공사코드', on_delete=django.db.models.deletion.CASCADE, related_name='cost_code_rules', to='connections.costcode')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cost_code_rules', to='connections.project')),
            ],
            options={
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CostCodeAssignmentRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='새 공사코드 할당 규칙', max_length=255)),
                ('conditions', models.JSONField(blank=True, default=list, help_text='규칙이 적용될 QuantityMember를 필터링하는 조건')),
                ('cost_code_expressions', models.JSONField(default=dict, help_text="할당할 공사코드의 속성을 반환하는 표현식. 예: {'code': 'RC-{층}', 'name': '{분류} 타설'}")),
                ('priority', models.IntegerField(default=0)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cost_code_assignment_rules', to='connections.project')),
            ],
            options={
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.AddField(
            model_name='costcode',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cost_codes', to='connections.project'),
        ),
        migrations.CreateModel(
            name='QuantityClassificationTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('required_properties', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classification_tags', to='connections.project')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('project', 'name')},
            },
        ),
        migrations.CreateModel(
            name='PropertyMappingRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='새 속성 맵핑 규칙', max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('conditions', models.JSONField(blank=True, default=list, help_text='규칙이 적용될 RawElement를 필터링하는 조건 (ClassificationRule과 동일한 구조)')),
                ('mapping_script', models.JSONField(default=dict, help_text="속성을 계산하고 맵핑하는 스크립트. 예: {'체적': '{Volume} * 1.05'}")),
                ('priority', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_mapping_rules', to='connections.project')),
                ('target_tag', models.ForeignKey(help_text='이 규칙이 적용될 대상 수량산출분류', on_delete=django.db.models.deletion.CASCADE, related_name='property_mapping_rules', to='connections.quantityclassificationtag')),
            ],
            options={
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ClassificationRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conditions', models.JSONField(default=list)),
                ('priority', models.IntegerField(default=0)),
                ('description', models.CharField(blank=True, max_length=255)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classification_rules', to='connections.project')),
                ('target_tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rules', to='connections.quantityclassificationtag')),
            ],
            options={
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='RawElement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('element_unique_id', models.CharField(max_length=255)),
                ('raw_data', models.JSONField()),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('classification_tags', models.ManyToManyField(blank=True, related_name='raw_elements', to='connections.quantityclassificationtag')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='raw_elements', to='connections.project')),
            ],
            options={
                'unique_together': {('project', 'element_unique_id')},
            },
        ),
        migrations.CreateModel(
            name='SpaceAssignmentRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(default='새 동적 공간 할당 규칙', max_length=255)),
                ('member_filter_conditions', models.JSONField(blank=True, default=list, help_text='규칙을 적용할 수량산출부재를 필터링하는 조건 (JSON)')),
                ('member_join_property', models.CharField(help_text='매칭에 사용할 부재의 속성 경로 (예: BIM원본.참조 레벨)', max_length=255)),
                ('space_join_property', models.CharField(help_text='매칭에 사용할 공간의 속성 경로 (예: Name 또는 BIM원본.Name)', max_length=255)),
                ('priority', models.IntegerField(default=0)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='space_assignment_rules', to='connections.project')),
            ],
            options={
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SpaceClassification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('mapped_elements', models.ManyToManyField(blank=True, related_name='space_classifications', to='connections.rawelement')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='connections.spaceclassification')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='space_classifications', to='connections.project')),
                ('source_element', models.OneToOneField(blank=True, help_text='이 공간분류를 생성한 원본 BIM 객체', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='source_of_space', to='connections.rawelement')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('project', 'parent', 'name')},
            },
        ),
        migrations.CreateModel(
            name='QuantityMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('properties', models.JSONField(blank=True, default=dict)),
                ('mapping_expression', models.JSONField(blank=True, default=dict, verbose_name='맵핑식(json)')),
                ('member_mark_expression', models.CharField(blank=True, help_text='개별 부재에 적용될 일람부호(Mark) 값 표현식', max_length=255)),
                ('cost_code_expressions', models.JSONField(blank=True, default=list, help_text='개별 부재에 적용될 공사코드 표현식 목록 (JSON)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('classification_tag', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quantity_members', to='connections.quantityclassificationtag')),
                ('cost_codes', models.ManyToManyField(blank=True, related_name='quantity_members', to='connections.costcode')),
                ('member_mark', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quantity_members', to='connections.membermark')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quantity_members', to='connections.project')),
                ('raw_element', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quantity_members', to='connections.rawelement')),
                ('space_classifications', models.ManyToManyField(blank=True, related_name='quantity_members', to='connections.spaceclassification')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='UnitPriceType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='단가 구분 이름 (예: 표준단가)', max_length=100)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_price_types', to='connections.project')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('project', 'name')},
            },
        ),
        migrations.CreateModel(
            name='CostItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity', models.FloatField(default=0.0)),
                ('quantity_mapping_expression', models.JSONField(blank=True, default=dict, verbose_name='수량 맵핑식(json)')),
                ('description', models.TextField(blank=True, help_text='수동 생성 시 특이사항 기록', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('cost_code', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cost_items', to='connections.costcode')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cost_items', to='connections.project')),
                ('quantity_member', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='cost_items', to='connections.quantitymember')),
                ('unit_price_type', models.ForeignKey(blank=True, help_text='이 산출항목에 적용할 단가 기준', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cost_items', to='connections.unitpricetype')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='costcode',
            unique_together={('project', 'code')},
        ),
        migrations.CreateModel(
            name='AIModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='모델 이름', max_length=255)),
                ('description', models.TextField(blank=True, help_text='모델 설명', null=True)),
                ('h5_file_content', models.BinaryField(help_text='.h5 모델 파일의 바이너리 데이터')),
                ('metadata', models.JSONField(default=dict, help_text='모델 메타데이터 (입력/출력 피처, 성능 등)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_models', to='connections.project')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('project', 'name')},
            },
        ),
        migrations.CreateModel(
            name='SpaceClassificationRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('level_depth', models.IntegerField(help_text='위계 수준 (0=최상위)')),
                ('level_name', models.CharField(help_text='위계의 이름 (예: Project, Site, Building)', max_length=100)),
                ('bim_object_filter', models.JSONField(help_text='이 위계에 해당하는 BIM 객체를 찾는 조건')),
                ('name_source_param', models.CharField(help_text='공간분류의 이름으로 사용할 BIM 객체의 속성 이름', max_length=255)),
                ('parent_join_param', models.CharField(blank=True, help_text='상위 객체에서 연결에 사용할 속성 (예: GlobalId)', max_length=255)),
                ('child_join_param', models.CharField(blank=True, help_text='현재 객체에서 상위 객체와 연결에 사용할 속성 (예: ParentGlobalId)', max_length=255)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='space_classification_rules', to='connections.project')),
            ],
            options={
                'ordering': ['project', 'level_depth'],
                'unique_together': {('project', 'level_depth')},
            },
        ),
        migrations.CreateModel(
            name='UnitPrice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('material_cost', models.DecimalField(decimal_places=4, default=Decimal('0.0'), help_text='재료비 단가', max_digits=19)),
                ('labor_cost', models.DecimalField(decimal_places=4, default=Decimal('0.0'), help_text='노무비 단가', max_digits=19)),
                ('expense_cost', models.DecimalField(decimal_places=4, default=Decimal('0.0'), help_text='경비 단가', max_digits=19)),
                ('total_cost', models.DecimalField(decimal_places=4, default=Decimal('0.0'), help_text='합계 단가 (재료비+노무비+경비 또는 직접 입력)', max_digits=19)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cost_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_prices', to='connections.costcode')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unit_prices', to='connections.project')),
                ('unit_price_type', models.ForeignKey(help_text='단가 구분', on_delete=django.db.models.deletion.PROTECT, related_name='unit_prices', to='connections.unitpricetype')),
            ],
            options={
                'ordering': ['cost_code__code', 'unit_price_type__name'],
                'unique_together': {('cost_code', 'unit_price_type')},
            },
        ),
    ]
